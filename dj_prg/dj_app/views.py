from django.shortcuts import render
from dj_app.forms import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –§–û–†–ú–´
from django.http import HttpResponse, HttpResponseRedirect
from class_files import File
from .models import *  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
from django.contrib.auth.models import User
from django.db.utils import IntegrityError


# –ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–∞
def index(request):
    return render(request, "index.html")


# –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –§–û–†–ú–ê–ú–ò
class Forms:

    # FORM 1: –ü–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ (–î–ï–ô–°–¢–í–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –§–û–†–ú–£ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    @staticmethod
    def one_get(request):
        my_form = UserForm()  # –°–æ–∑–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º—ã
        context = {"form": my_form}
        return render(request, "form1.html", context=context)

    # FORM 2: –í—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∞ (–î–ï–ô–°–¢–í–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –§–û–†–ú–£ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    @staticmethod
    def two_get(request):
        my_form = UserForm()  # –°–æ–∑–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç —Ñ–æ—Ä–º—ã
        context = {"form": my_form}
        return render(request, "form2.html", context=context)

    # FORM 3: –¢—Ä–µ—Ç—å—è —Ñ–æ—Ä–º–∞ (–î–ï–ô–°–¢–í–ò–Ø: –ü–æ–∫–∞–∑–∞—Ç—å –§–û–†–ú–£ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ + –û–ë–†–ê–ë–û–¢–ö–ê)
    @staticmethod
    def three_get_post(request):
        if request.method == "GET":
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –µ–µ –≤ —à–∞–±–ª–æ–Ω
            my_form = FloatingForm()
            context = {"form": my_form}
            return render(request, "form3.html", context=context)
        if request.method == "POST":
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
            email = request.POST.get("email")
            password = request.POST.get("password")
            # –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–≤—É—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            data = {"email": email, "password": password}  # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å
            # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ë–î (db.json)
            File.write_json(data=data, path="db.json", overwriting=False)
            # –ü—Ä–æ—á–∏—Ç–∞—Ç—å –ë–î –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é table
            table = File.read_json("db.json")
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            context = {"table": table}
            return render(request, "form3.html", context=context)

    # –û–ë–†–ê–ë–û–¢–ö–ê 1/2 —Ñ–æ—Ä–º (–î–ï–ô–°–¢–í–ò–Ø: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –î–ê–ù–ù–´–ï –∏–∑ —Ñ–æ—Ä–º—ã + –ø–æ–∫–∞–∑–∞—Ç—å –î–ê–ù–ù–´–ï –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ)
    @staticmethod
    def processing(request):
        print(request.POST)  # –í—ã–≤–æ–¥ —Å–ª–æ–≤–∞—Ä—è (—Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã)

        # request.POST - —ç—Ç–æ QueryDict
        # –ß—Ç–æ–±—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ QueryDict –ø–æ–ª—É—á–∏—Ç—å list –∞ –Ω–µ str, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ .getlist("country")

        # –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—á–µ–≥–æ –∫–æ–¥–∞ (–≥–¥–µ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ MultipleChoiceField)
        x = request.POST.getlist("country")
        print(x, type(x))

        flag = True if request.POST.get("flag") == "on" else False  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –∏–∑ —Ñ–æ—Ä–º—ã –§–ª–∞–≥
        text = "<h2>–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã:</h2>"  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ñ–∏–Ω–∞–ª—å–Ω—ã–π/–≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π html
        for key, value in request.POST.items():  # –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å "text"
            if not key == "csrfmiddlewaretoken" and not key == "flag":  # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ª–æ–≤–∞—Ä—è
                if key == "country":
                    # 1 —Å–ø–æ—Å–æ–± (—Ö—É–∂–µ)
                    # text += "<b>{}:</b> ".format(key[0].upper() + key[1:])  # –î–æ–±–∞–≤–ª—è–µ–º - Country:
                    # for i in request.POST.getlist("country"):
                    #     text += "{} ".format(i)  # # –î–æ–±–∞–≤–ª—è–µ–º - –ê–Ω–≥–ª–∏—è –ì–µ—Ä–º–∞–Ω–∏—è –ò—Å–ø–∞–Ω–∏—è
                    # text += "<br>"  # –î–æ–±–∞–≤–ª—è–µ–º - –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                    # 2 —Å–ø–æ—Å–æ–± (–ª—É—á—à–µ)
                    country = ", ".join(request.POST.getlist("country"))  # —Å—Ç—Ä–æ–∫–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∞–º–∏
                    text += "<b>{}:</b> {}<br>".format(key[0].upper() + key[1:], country)  # –î–æ–±–∞–≤–ª—è–µ–º - Country:
                else:
                    text += "<b>{}:</b> {}<br>".format(key[0].upper() + key[1:], value)
        text += "<b>{}:</b> {}<br>".format("Flag", flag)  # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ –§–ª–∞–≥–∞ –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π "text"
        return HttpResponse(text)


# –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ú–û–î–ï–õ–Ø–ú–ò
class Models:

    # –ú–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞ /operation (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º + –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã)
    @staticmethod
    def operation(request):
        if request.method == "GET":
            form = OperationForm()  # –°–æ–∑–¥–∞—é —Ñ–æ—Ä–º—É
            data = DataBase.read(model=Person)  # –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É
            context = {"data": data, "form": form}
            return render(request, "operation.html", context=context)
        if request.method == "POST":
            name = request.POST.get("name")  # –ü–æ–ª—É—á–∏–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã –ò–º—è
            age = request.POST.get("age")  # –ü–æ–ª—É—á–∏–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã –í–æ–∑—Ä–∞—Å—Ç
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
            if len(name) and len(age):
                kwargs = {"name": name, "age": age}  # –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                DataBase.write(model=Person, **kwargs)  # –ü–∏—à–µ—Ç –≤ –ë–î
                form = OperationForm()  # –°–æ–∑–¥–∞—é —Ñ–æ—Ä–º—É
                data = DataBase.read(model=Person)  # –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É
                lol = f"–ß–µ–ª–æ–≤–µ–∫ –ø–æ –∏–º–µ–Ω–∏: ¬´{name}¬ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö üòÄ"
                context = {"data": data, "form": form, "lol": lol}
                return render(request, "operation.html", context=context)
            else:
                form = OperationForm()  # –°–æ–∑–¥–∞—é —Ñ–æ—Ä–º—É
                data = DataBase.read(model=Person)  # –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É
                error = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É! üòì"
                context = {"data": data, "form": form, "error": error}
                return render(request, "operation.html", context=context)

    # –ú–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞ /edit
    @staticmethod
    def edit(request, user_id):
        # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if request.method == "GET":
            form = OperationForm()  # –°–æ–∑–¥–∞—é —Ñ–æ—Ä–º—É
            data = DataBase.read(model=Person)  # –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É
            context = {"data": data, "form": form, "user_id": int(user_id)}
            return render(request, "operation.html", context=context)
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ä–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if request.method == "POST":
            name = request.POST.get("name")  # –ü–æ–ª—É—á–∏–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã –ò–º—è
            age = request.POST.get("age")  # –ü–æ–ª—É—á–∏–ª–∏ –∏–∑ —Ñ–æ—Ä–º—ã –í–æ–∑—Ä–∞—Å—Ç
            kwargs = {"name": name, "age": age}
            DataBase.update(model=Person, elm_id=user_id, **kwargs)  # –û–±–Ω–æ–≤–∏–ª–∏

            form = OperationForm()  # –°–æ–∑–¥–∞—é —Ñ–æ—Ä–º—É
            data = DataBase.read(model=Person)  # –ß–∏—Ç–∞—é —Ç–∞–±–ª–∏—Ü—É
            context = {"data": data, "form": form}
            return render(request, "operation.html", context=context)

    # –ú–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞ /delete (—É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É)
    @staticmethod
    def delete(request, user_id):
        kwargs = {"id": user_id}  # –ü–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        DataBase.delete(model=Person, **kwargs)  # –£–¥–∞–ª—è—é —ç–ª–µ–º–µ–Ω—Ç —Å —Ç–∞–±–ª–∏—Ü—ã
        return HttpResponseRedirect("/operation")

    # –ú–µ—Ç–æ–¥ –º–∞—Ä—à—Ä—É—Ç–∞ /create_user (—Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
    @staticmethod
    def create_user(request):
        DataBase.create_user("moderator", "12345", "moderator@gmail.com")
        print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω!")
        return HttpResponseRedirect("/operation")

    # –°–≤—è–∑—å –æ–¥–∏–Ω –∫–æ –º–Ω–æ–≥–∏–º.
    @staticmethod
    def connection_foreign_key(request):
        # 1. [–°–æ–∑–¥–∞–Ω–∏–µ] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º.
        # DataBase.write(model=Company, **{'name': 'xiaomi'})
        # 2. [–°–æ–∑–¥–∞–Ω–∏–µ] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏.
        # DataBase.write(model=Product, **{'name': 'Xiaomi Note 5', 'price': '5999', 'company_id': '6'})
        # 3. [–°–æ–∑–¥–∞–Ω–∏–µ] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞, –æ–±—Ä–∞—â–∞—è—Å—å –∫ –∫–æ–º–ø–∞–Ω–∏–∏.
        # product = Product(name='Samsung Galaxy S2', price='2045')
        # Company.objects.get(name='samsung').product_set.add(product, bulk=False)
        # 1. –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é.
        products = Company.objects.get(name='apple').product_set.all()
        result = ''
        for product in products:
            result += str(product.name) + ', '
        result += "<br>"
        # 2. –ß—Ç–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–¥—É–∫—Ç—ã.
        products = Product.objects.filter(company_id=4)
        for product in products:
            result += str(product.name) + ', '
        return HttpResponse(f"{result}")

    # –°–≤—è–∑—å –º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º.
    @staticmethod
    def connection_many_to_many(request):
        return HttpResponse("sdfd")

    # –°–≤—è–∑—å –æ–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É.
    @staticmethod
    def connection_one_to_one(request):
        return HttpResponse("sdfd")


# –ö–ª–∞—Å—Å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –í–ù–£–¢–†–ï–ù–ù–Æ–Æ —Ä–∞–±–æ—Ç—É —Å –ë–î
class DataBase:
    @staticmethod
    # –ß—Ç–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "model" —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –≤ {} —á–µ—Ä–µ–∑ "kwargs"
    def read(model, mode="all", **kwargs):
        # .count() - –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        if mode == "all":  # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è [–≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤]
            result = model.objects.all()
            return list(result.values())
        if mode == "filter":  # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ [–≤—Å–µ –∫–æ—Ç–æ—Ä—ã–µ = —Ñ–∏–ª—å—Ç—Ä]
            result = model.objects.filter(**kwargs)
            return list(result.values())
        if mode == "exclude":  # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ [–≤—Å–µ –∫–æ—Ç–æ—Ä—ã–µ = –Ω–µ —Ñ–∏–ª—å—Ç—Ä]
            result = model.objects.exclude(**kwargs)
            return list(result.values())
        if mode == "get":  # –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è [–æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞]
            result = model.objects.get(**kwargs)  # id/pk –æ–¥–Ω–æ –∏ —Ç–æ–∂–µ
            print(result, type(result))
            return [result]

    @staticmethod
    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É "model" —ç–ª–µ–º–µ–Ω—Ç–∞ —Å –ø–æ–ª—è–º–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä–µ–¥–∞–µ–º –≤ {} —á–µ—Ä–µ–∑ "kwargs"
    def write(model, **kwargs):
        model(**kwargs).save()  # –∏–ª–∏ Person.objects.create(**kwargs)

    @staticmethod
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å "elm_id" –≤ —Ç–∞–±–ª–∏—Ü–µ "model", –∞ –∏–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –ø–æ–ª–µ–π –Ω–∞ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤ {} —á–µ—Ä–µ–∑ "kwargs"
    def update(model, elm_id, **kwargs):
        model.objects.filter(id=elm_id).update(**kwargs)

    @staticmethod
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã "model" –∑–∞–ø–∏—Å–∏, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–µ–π —Ñ–∏–ª—å—Ç—Ä—É –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –≤ {} —á–µ—Ä–µ–∑ "kwargs"
    def delete(model, **kwargs):
        model.objects.filter(**kwargs).delete()

    @staticmethod
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å "login" "password" "email" (–≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã)
    def create_user(login, password, email):
        try:
            User.objects.create_user(login, email, password).save()
        except IntegrityError:
            pass
